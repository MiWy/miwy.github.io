<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Michał Wyrwa</title>
    <link>https://michalwyrwa.org/categories/blog/</link>
    <description>Recent content in Blog on Michał Wyrwa</description>
    <generator>Hugo</generator>
    <language>pl-pl</language>
    <lastBuildDate>Sat, 08 Jun 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://michalwyrwa.org/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writing workflow: Pandoc scripts</title>
      <link>https://michalwyrwa.org/posts/2019-06-08-pandocscripts/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://michalwyrwa.org/posts/2019-06-08-pandocscripts/</guid>
      <description>&lt;h3 id=&#34;tldr-i-uploaded-my-pandoc-workflow-to-github-feel-free-to-use-it&#34;&gt;tl;dr I uploaded my Pandoc workflow to &lt;a href=&#34;https://github.com/MiWy/my-pandoc-scripts&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;GitHub&lt;/a&gt;, feel free to use it&lt;/h3&gt;&#xA;&lt;p&gt;Having an unobtrusive workflow is important.&lt;/p&gt;&#xA;&lt;p&gt;There are things about writing that just take too much time when done by hand. Text formatting and file converting are two that I especially hate. People expect different things. Some want &lt;code&gt;.docx&lt;/code&gt;, others &lt;code&gt;.tex&lt;/code&gt; or &lt;code&gt;.pdfs&lt;/code&gt;, all complying with a set of strict formatting rules. Often enough a faithful conversion of &lt;code&gt;.odt&lt;/code&gt; to &lt;code&gt;.docx&lt;/code&gt; means spending hours on fiddling with margins, fonts, and other details. And do not get me started on &amp;lsquo;We want &lt;code&gt;.tex&lt;/code&gt; files!&amp;rsquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[OLD] ISS, Architecture: ViewModel, LiveData, Retrofit</title>
      <link>https://michalwyrwa.org/posts/2018-04-29-viewmodel/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://michalwyrwa.org/posts/2018-04-29-viewmodel/</guid>
      <description>&lt;p&gt;[This is a post from my old website. Outdated packages and libraries. Viewer discretion is advised ;-)]&lt;/p&gt;&#xA;&lt;p&gt;W tym artykule stworzymy prostą aplikację na Android wyświetlającą aktualną pozycję Międzynarodowej Stacji Kosmicznej, wykorzystującą ViewModel, LiveData oraz bibliotekę Retrofit. Przy okazji wyjaśnimy jak działają dodane w zeszłym roku komponenty architektury Androida.&lt;/p&gt;&#xA;&lt;p&gt;Aplikacja wyglądać będzie tak:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://michalwyrwa.org/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://michalwyrwa.org/images/oldblog/issfinishedappl.png&#34;&#xA;        data-srcset=&#34;https://michalwyrwa.org/images/oldblog/issfinishedappl.png, https://michalwyrwa.org/images/oldblog/issfinishedappl.png 1.5x, https://michalwyrwa.org/images/oldblog/issfinishedappl.png 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/images/oldblog/issfinishedappl.png&#34;&#xA;        title=&#34;image-center&#34; /&gt;{: .align-center}&lt;/p&gt;&#xA;&lt;h2 id=&#34;komponenty-architektury-androida&#34;&gt;Komponenty architektury Androida&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;Architecture Components&lt;/a&gt; to biblioteki dla Androida, zaprezentowane przez Google na &lt;a href=&#34;https://www.youtube.com/watch?v=FrteWKKVyzI&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;I/O &amp;lsquo;17&lt;/a&gt;. Mają one ułatwić proces projektowania architektury aplikacji. Dotąd zespół Androida nie rekomendował żadnego konkretnego wzorca architektury. A tych popularnych trochę jest, by wymienić same &lt;a href=&#34;https://medium.com/@vicky7230/android-architecture-patterns-mv-c-p-vm-4594574eeaa1&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;&lt;em&gt;model-view-*&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[OLD] SpotiBar: ANGULARJS</title>
      <link>https://michalwyrwa.org/posts/2018-04-13-angularjs-spotibar/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://michalwyrwa.org/posts/2018-04-13-angularjs-spotibar/</guid>
      <description>&lt;p&gt;[This is a post from my old website. Outdated packages and libraries. Viewer discretion is advised ;-)]&lt;/p&gt;&#xA;&lt;h2 id=&#34;part-1&#34;&gt;PART 1&lt;/h2&gt;&#xA;&lt;p&gt;Zgodnie z poprzednim wpisem, rozbierzemy SpotiBar w wersji JavaScript na czynniki pierwsze. Użyjemy AngularJS, JavaScript i API Spotify.&lt;/p&gt;&#xA;&lt;p&gt;Jako że to pierwszy kontakt z JavaScriptem jako takim i choć budowana przez nas aplikacja pewnie nie spełnia kryteriów dobrego kodu, to przynajmniej pokazuje, że mimo &lt;a href=&#34;https://risingstars.js.org/2017/en/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;Mnogości&lt;/a&gt; JS-owych frameworków i możliwości, rozpoczęcie zabawy w developerkę nie jest trudne.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[OLD] SpotiBar: Spotify &#43; Foobar</title>
      <link>https://michalwyrwa.org/posts/2017-09-13-spotibar/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://michalwyrwa.org/posts/2017-09-13-spotibar/</guid>
      <description>&lt;p&gt;[This is a post from my old website. Outdated packages and libraries. Viewer discretion is advised ;-)]&lt;/p&gt;&#xA;&lt;h2 id=&#34;spotibar&#34;&gt;SPOTIBAR&lt;/h2&gt;&#xA;&lt;p&gt;Spotify zacząłem używać od momentu jak wprowadzili abonament w PLN. Kilka lat doświadczenia się zatem zebrało i choć bardzo sobie cenię tę usługę, to jest jedna rzecz, która mi strasznie w niej przeszkadza.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://michalwyrwa.org/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://michalwyrwa.org/images/oldblog/13-09-2017-spotify-desktop.png&#34;&#xA;        data-srcset=&#34;https://michalwyrwa.org/images/oldblog/13-09-2017-spotify-desktop.png, https://michalwyrwa.org/images/oldblog/13-09-2017-spotify-desktop.png 1.5x, https://michalwyrwa.org/images/oldblog/13-09-2017-spotify-desktop.png 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/images/oldblog/13-09-2017-spotify-desktop.png&#34;&#xA;        title=&#34;image-center&#34; /&gt;{: .align-center}&lt;/p&gt;&#xA;&lt;p&gt;Od razu zaznaczę, że należę do grona ludzi, którzy trzymać swoją kolekcję muzyczną w ordnungu. Jak kupuję płytę CD, to znajduję dla niej miejsce na odpowiedniej półeczce, scrobbluję do &lt;a href=&#34;https://www.last.fm&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;last.fm&lt;/a&gt; z iTunesa, Spotify&amp;rsquo;a i telefonu, staram się pamiętać czy dany album mam na nośniku fizycznym, cyfrowym, w streamingu, i tak dalej.&#xA;Zarządzanie kolekcją w Spotify kuleje. Jak tylko nasze playlisty przekroczą te kilkadziesiąt utworów, wzrokowe odnalezienie się w nich jest dla mnie niemożliwe. Jest searchbar po playliście, ale co z utworami, których nazwy nie potrafię przywołać a potrafię jedynie rozpoznać? Poza tym, jakbym chciał wszystko załatwiać klawiaturowo, to używałbym &lt;a href=&#34;https://www.musicpd.org&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;mpd&lt;/a&gt; + &lt;a href=&#34;https://www.mopidy.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;mopidy&lt;/a&gt; w terminalu.&#xA;Listy mają za wysoką linię wiersza (nawet po zoom- na maksimum), nie mogę playlisty pokazać jako zbioru miniatur okładek/wykonawców, nie mogę szukać jednocześnie po wszystkich swoich playlistach/bibliotece (tylko po całej bazie utwórów), i tak dalej. Cała koncepcja biblioteki w Spotify leży i kwiczy. Gdybym miał przenieść tam bibliotekę wykonawców z last.fm, nie wiem w jaki sposób miałbym cokolwiek w niej znaleźć.&#xA;Koniec końców moja przygoda ze Spotify wygląda tak, że nigdy wcześniej tak dużo nowej muzyki nie słuchałem, ale też nigdy wcześniej tak mało wykonawców/albumów nie zapamiętywałem. Przyjąłem więc rozwiązanie robocze: playlista jest albo pod gatunek albo pod dany temat. Przykładowo, wczesny black metal ma swoją playlistę, podobnie jak muzyka pasująca do pracy przy komputerze, czy jazdy samochodem. Mam też playlisty nieeleganckie: albumy do przesłuchania, utwory do uporządkowania i tym podobne.&#xA;Być może taki urok czasów, presji wywoływanej samą możliwością słuchania czegokolwiek spośród X milionów dostępnych w Spotify utworów. Póki co nie potrafię tego rozstrzygnąć, ale pamiętam taki programik jak &lt;a href=&#34;https://www.foobar2000.org&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;foobar2000&lt;/a&gt;. Był idealny dla moich potrzeb. Prosty, konfigurowalny do cna, w którym od razu wiedziałem, gdzie i w jakim miejscu kryje się ten utwór, na który mam w danym momencie ochotę.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[OLD] Java 101: Enum &#43; Servlets</title>
      <link>https://michalwyrwa.org/posts/2017-07-06-enumsql/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://michalwyrwa.org/posts/2017-07-06-enumsql/</guid>
      <description>&lt;p&gt;[This is a post from my old website. Outdated packages and libraries. Viewer discretion is advised ;-)]&lt;/p&gt;&#xA;&lt;h2 id=&#34;enum&#34;&gt;ENUM&lt;/h2&gt;&#xA;&lt;p&gt;Typ &lt;strong&gt;enum&lt;/strong&gt;, dodany w wersji 1.5, służy do definiowania stałych. Kiedy mamy z nim do czynienia, to wiemy że mamy do wyboru ograniczony zbiór możliwych opcji. Przykładowo, definiując enum &lt;code&gt;poraRoku&lt;/code&gt; z góry wiemy, że będzie on przyjmować wartości jedynie spośród &lt;em&gt;&lt;code&gt;ZIMA&lt;/code&gt;&lt;/em&gt;, &lt;em&gt;&lt;code&gt;WIOSNA&lt;/code&gt;&lt;/em&gt;, &lt;em&gt;&lt;code&gt;LATO&lt;/code&gt;&lt;/em&gt; i &lt;em&gt;&lt;code&gt;JESIEN&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Każdy enum domyślnie rozszerza klasę &lt;code&gt;java.lang.Enum&lt;/code&gt;, dlatego nie może rozszerzać żadnej innej klasy. Może natomiast implementować interfejsy. Enumy możemy definiować również jako klasy wewnętrzne.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[OLD] Courier App for Android</title>
      <link>https://michalwyrwa.org/posts/2017-05-17-android_courier_firebase/</link>
      <pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate>
      <guid>https://michalwyrwa.org/posts/2017-05-17-android_courier_firebase/</guid>
      <description>&lt;p&gt;[This is a post from my old website. Outdated packages and libraries. Viewer discretion is advised ;-)]&lt;/p&gt;&#xA;&lt;h2 id=&#34;first-part&#34;&gt;FIRST PART&lt;/h2&gt;&#xA;&lt;p&gt;The idea for a courier app isn’t new. You can find countless examples on Google Play Store. But building one is actually quite handy exercise in integrating Android with Firebase services.&lt;/p&gt;&#xA;&lt;p&gt;In this series we will cover only parts of building the actual bike courier app. Focus will be on Firebase integration and also some design pattern strategies. Android code can look really ugly really quick if you just put everything within your Activity class.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
